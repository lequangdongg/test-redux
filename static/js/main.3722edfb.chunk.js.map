{"version":3,"sources":["action/index.js","constants/ActionTypes.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/ConTrol.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/Search.js","reducers/index.js","index.js"],"names":["editTask","task","type","TaskForm","props","onCloseForm","onChangee","event","target","name","value","setState","onSubmit","preventDefault","onAddSaveTask","state","onClear","status","id","this","itemEditing","nextProps","isDisplayForm","className","onClick","onChange","Component","connect","dispatch","actions","Search","onSearch","keyword","placeholder","filter","Sort","sortBy","sortValue","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","ConTrol","TaskItem","OnUpdateStatus","onUpdateStatus","onDelete","onDeleteTask","onEditTask","onOpenForm","index","scope","TaskList","checked","filterName","filterStatus","onFilterTable","taskslist","filterTable","toLowerCase","indexOf","elmTasks","tasks","map","key","App","onToggleForm","onClearTask","onUpdate","taskEditing","findIndex","onShowForm","Boolean","window","location","hostname","match","s4","Math","floor","random","toString","substring","generateID","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","newTask","staus","indexTask","push","setItem","stringify","indexDelete","splice","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3722edfb.chunk.js","sourcesContent":["import * as types from './../constants/ActionTypes';\n\nexport const listAll = () => {\n    return {\n        type: types.LIST_ALL,\n    \n    }\n};\n\nexport const saveTask = (task) => {\n    return {\n        type : types.SAVE_TASK,\n        task // task : task\n    }\n};\n\nexport const toggleForm = () => {\n    return {\n        type : types.TOGGLE_FORM\n    }\n};\n\nexport const openForm = () => {\n    return {\n        type : types.OPEN_FORM\n    }\n};\n\nexport const closeForm = () => {\n    return {\n        type : types.CLOSE_FORM\n    }\n};\n\nexport const updateStatus = (id) => { \n    return {\n        type: types.UPDATE_STATUS,\n        id\n    }\n};\n\nexport const deleteTask = (id) => { \n    return {\n        type: types.DELETE_TASK,\n        id\n    }\n};\n\nexport const editTask = (task) => {\n    return {\n        type: types.EDIT_ITEM,\n        task\n    }\n};\n\nexport const filterTask = (filter) => {\n    return{\n        type: types.FILTER_TABLE,\n        filter\n    }\n};   \n\nexport const searchTask = (filter) => {\n    return {\n        type : types.SEARCH,\n        filter\n    }\n}","export const LIST_ALL = 'LIST_ALL';\nexport const SAVE_TASK = 'SAVE_TASK';\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\nexport const CLOSE_FORM = 'CLOSE_FORM';\nexport const OPEN_FORM = 'OPEN_FORM';\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const EDIT_ITEM = 'EDIT_ITEM';\nexport const FILTER_TABLE = 'FILTER_TABLE';\nexport const SEARCH = 'SEARCH';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from './../action/index';\nexport class TaskForm extends Component {\n\n    constructor(props){\n        super(props);\n        this.state ={\n            id: '',\n            name: '',\n            status: true\n        };\n    }\n    componentDidMount(){\n        if(this.props.itemEditing !== null){\n            this.setState({\n                id: this.props.itemEditing.id,\n                name: this.props.itemEditing.name,\n                status: this.props.itemEditing.status\n            });\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps){\n        if(nextProps && nextProps.itemEditing){\n            this.setState({\n                id: nextProps.itemEditing.id,\n                name: nextProps.itemEditing.name,\n                status: nextProps.itemEditing.status\n            });\n        }\n        else{\n            this.onClear();\n        }\n    }\n\n    onCloseForm = () => {\n        this.props.onCloseForm();\n    }\n\n    onChangee = (event) => {\n        var target = event.target;\n        var name = target.name;\n        var value = target.value;\n        if(name === 'status'){\n            value = target.value === 'true' ? true : false\n        }\n        this.setState({\n            [name] : value \n        });\n    }\n    \n    onSubmit = (event) => {\n        event.preventDefault();\n        // this.props.onSubmit(this.state);\n        this.props.onAddSaveTask(this.state);\n        // cancel and close form\n        this.onClear();\n        this.onCloseForm();\n    }\n    \n    onClear = () => {\n        this.setState({\n            name: '',\n            status: true\n        });\n    }\n\n    render() {\n        var {id} = this.state;\n        if(!this.props.isDisplayForm ) return null;\n        return (\n            <div>\n                    <div className=\"card\">\n                        <h5 className=\"card-header alert-success\" onClick = {this.onCloseForm}>\n                            {id !== '' ? 'Cập nhật công việc' : 'Thêm công việc'}\n                        <span className=\"fa fa-times-circle left-50\"></span>\n                        </h5>\n\n                        <div className=\"card-body\">\n\n                            <form onSubmit = { this.onSubmit}>\n                            <div className=\"form-group\">\n                                <label>Tên : </label>\n                                <input \n                                    type=\"text\" \n                                    name=\"name\"\n                                    className=\"form-control\"\n                                    value={this.state.name}\n                                    onChange={this.onChangee}\n                                    />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label>Trạng thái : </label>\n                                <select \n                                    className=\"form-control\"\n                                    name=\"status\"\n                                    value={this.state.status}\n                                    onChange={this.onChangee}\n                                    >\n                                <option value={true}>Kích hoạt</option>\n                                <option value={false}>Ẩn</option>\n                                </select><br/>\n\n                                <div className=\"text-center\">\n                                    <button type=\"submit\" className=\"btn btn-primary\">\n                                    <span className=\"fa fa-plus\"></span>Lưu Lại\n                                    </button>&nbsp;\n                                    <button type=\"button\" \n                                            className=\"btn btn-danger\"\n                                            onClick={this.onClear}\n                                            >\n                                    <span className=\"fa fa-times-circle\"></span>Hủy bỏ\n                                    </button>\n                                </div>\n                            </div>\n                            </form>\n                        </div>\n                    </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm : state.isDisplayForm,\n        itemEditing : state.itemEditing\n    }\n};\n\nconst mapDispachToProps = (dispatch,props) => {\n    return {\n        onAddSaveTask : (task) => {\n            dispatch(actions.saveTask(task));\n        },\n        onCloseForm : () => {\n            dispatch(actions.closeForm())\n        },\n        \n    }\n}\n\nexport default connect(mapStateToProps,mapDispachToProps)(TaskForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from './../action/index';\n\nexport class Search extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            keyword: ''\n        }\n    }\n\n    onChange = (event) => {\n    var target = event.target;\n    var name = target.name;\n    var value = target.value;\n    this.setState({\n        [name] : value\n    });\n    }\n\n    onSearch = () => {\n        this.props.onSearch(this.state.keyword);\n    }\n\n    render() {\n        var { keyword} = this.state;\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 \">\n                    <div className=\"input-group\">\n                        <input\n                            name=\"keyword\"\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Nhập từ khóa...\"\n                            value ={keyword}\n                            onChange = {this.onChange}\n                        />\n                        <span className=\"input-group-btn\">\n                            <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSearch}>\n                                <span className=\"fas fa-search\"></span>Tìm\n                            </button>\n                        </span>\n                    </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nconst mapDispathToProps = (dispatch, props) => {\n    return {\n        onSearch : (keyword) => {\n            dispatch(actions.searchTask(keyword))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispathToProps)(Search);\n","import React, { Component } from 'react';\n\nexport class Sort extends Component {\n\n    // UNSAFE_componentWillReceiveProps(nextProps){\n    //     console.log(nextProps)\n    // }\n\n    onClick = (sortBy, sortValue) => {\n        this.props.onSort(sortBy,sortValue);\n    }\n\n    render() {\n\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"dropdown\">\n                    <button\n                        className=\"btn btn-primary dropdown-toggle\"\n                        type=\"button\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                    >\n                        Sắp xếp<span className=\"caret-square-down\"></span>\n                    </button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                        <button className=\"dropdown-item\" type=\"button\" onClick={() => this.onClick('name',1)}><p className={(this.props.sortBy === 'name' && this.props.sortValue === 1) ? 'sort_selected' : ''}>Từ A-Z</p></button>\n                        <button className=\"dropdown-item\" type=\"button\" onClick={() => this.onClick('name',-1)}><p className={(this.props.sortBy === 'name' && this.props.sortValue === -1) ? 'sort_selected' : ''}>Từ Z-A</p></button>\n                        <button className=\"dropdown-item\" type=\"button\" onClick={() => this.onClick('status',1)}><p className={(this.props.sortBy === 'status' && this.props.sortValue === 1) ? 'sort_selected' : ''}>Trạng thái kích hoạt</p></button>\n                        <button className=\"dropdown-item\" type=\"button\" onClick={() => this.onClick('status',-1)}><p className={(this.props.sortBy === 'status' && this.props.sortValue === -1) ? 'sort_selected' : ''}>Trạng thái ẩn</p></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Sort;\n","import React, { Component } from 'react';\nimport Search from './Search';\nimport Sort from './Sort';\n\nexport class ConTrol extends Component {\n    render() {\n        return (\n            <div className=\"row mt-30\">\n                <Search onSearch = {this.props.onSearch} />\n                <Sort  onSort = {this.props.onSort} sortBy={this.props.sortBy} sortValue={this.props.sortValue} />\n            </div>\n        );\n    }\n}\n\nexport default ConTrol;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from './../action/index';\nexport class TaskItem extends Component {\n    OnUpdateStatus = () => {\n       this.props.onUpdateStatus(this.props.task.id);\n    }\n    onDelete = () => {\n        this.props.onDeleteTask(this.props.task.id);\n        this.props.onCloseForm();\n    }\n    onEditTask = () => {\n        this.props.onOpenForm();\n        this.props.onEditTask(this.props.task);\n\n    }\n\n    render() {\n        var {task, index} = this.props;\n\n        return (\n                <tr>\n                    <th scope=\"row\">{index + 1}</th>\n                    <td>{task.name}</td>\n                    <td>\n                        <span className={ task.status === true ? 'badge badge-danger' : 'badge badge-success'} onClick={this.OnUpdateStatus}>\n                                        {task.status === true ? 'Kích hoạt' : ' Ẩn '}\n                        </span>\n                    </td>\n                    <td>\n                        <button type=\"submit\" \n                        className=\"btn btn-warning\" \n                        onClick={this.onEditTask}>\n                            <span className=\"fa fa-edit\"></span>Sửa\n                        </button>&nbsp;\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                            <span className=\"fa fa-times-circle\"></span>Xóa\n                        </button>\n                    </td>\n                </tr>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onUpdateStatus : (id) => {\n            dispatch(actions.updateStatus(id))\n        },\n        onDeleteTask : (id) => {\n            dispatch(actions.deleteTask(id))\n        },\n        onCloseForm : () => {\n            dispatch(actions.closeForm())\n        },\n        onOpenForm : () => {\n            dispatch(actions.openForm())\n        },\n        onEditTask : (task) => {\n            dispatch(actions.editTask(task))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);\n","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\nimport * as actions from './../action/index';\nimport { connect } from 'react-redux';\nexport class TaskList extends Component {\n\n  constructor(props){\n    super(props);\n    this.state ={\n      filterName: '',\n      filterStatus: -1 // all : -1, active : 1, deactive : 0\n    }\n  }\n\n  onChange = (event) => {\n    var target = event.target;\n    var name = target.name;\n    var value = target.value === 'checkbox' ? target.checked : target.value;\n    // this.props.onFilter(name === 'fifterName' ? value : this.state.filterName, name === 'filterStatus' ? value : this.state.filterStatus,)\n    let filter = {\n      name : name === 'fifterName' ? value : this.state.filterName,\n      status : name ==='filterStatus' ? value : this.state.filterStatus\n    };\n    this.props.onFilterTable(filter);\n    this.setState({\n      [name] : value  \n    });\n  }\n\n    render() {\n        var { taskslist,filterTable,keyword } = this.props;\n        if(filterTable.name){\n          taskslist = taskslist.filter((taskslist) => {\n            return taskslist.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1\n          });\n        }\n\n        taskslist = taskslist.filter((task) => {\n          if(filterTable.status === -1){\n            return taskslist;\n          }else{\n            return task.status=== (filterTable.status === 1? true : false);\n          }\n        });\n\n        \n        //search\n        taskslist = taskslist.filter((tasks) => {\n            return tasks.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n        })\n        \n        var elmTasks = taskslist.map((task, index) => {\n          return <TaskItem  \n                    key={task.id} \n                    index={index} \n                    task={task} \n                    />;\n        });\n        \n        return (\n            <div>\n                <table className=\"table table-bordered table-hover\">\n                    <thead>\n                      <tr className=\"table-success\">\n                        <th scope=\"col\">STT</th>\n                        <th scope=\"col\">Tên</th>\n                        <th scope=\"col\">Trạng thái</th>\n                        <th scope=\"col\">Hành động</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <th scope=\"row\"></th>\n                        <td>\n                            <input \n                                type=\"text\"\n                                className=\"form-control\"\n                                name=\"filterName\"\n                                value={filterTable.name}\n                                onChange={this.onChange}\n                            />\n                        </td>\n                        <td>\n                            <select\n                              className=\"form-control\"\n                              name=\"filterStatus\"\n                              value={filterTable.status}\n                                onChange={this.onChange}\n                            >\n                                <option value={-1}>Tất cả</option>\n                                <option value={0}>Ẩn</option>\n                                <option value={1}>Kích hoạt</option>\n                            </select>\n                        </td>\n                        <td></td>\n                      </tr>\n                          {/* <TaskItem /> */}\n                          { elmTasks }\n                          \n                    </tbody>\n                  </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      taskslist : state.tasks,\n      filterTable : state.filterTable,\n      keyword : state.Search\n    }\n}\n\nconst mapDispathToProps = (dispatch, props) => {\n  return {\n    onFilterTable : (filter) => {\n      dispatch(actions.filterTask(filter))\n    }\n  }\n}\n\nexport default connect(mapStateToProps,mapDispathToProps)(TaskList);","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport ConTrol from './components/ConTrol';\nimport TaskList from './components/TaskList';\nimport { connect } from 'react-redux';\nimport * as actions from './action/index';\nexport class App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state ={\n      keyword : '',\n      sortBy : 'name',\n      sortValue : 1\n    }\n  }\n\n  onToggleForm = () => { //thêm task\n    const {itemEditing} = this.props;\n    if(itemEditing && itemEditing.id !== ''){\n      this.props.onOpenForm();\n    }else{\n      this.props.onToggleForm();\n      \n    }\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      status: false\n    });\n  }\n\n  onUpdate = (id) => {\n    var {tasks} = this.state;\n    var index = this.findIndex(id);\n    var taskEditing = tasks[index];\n    this.setState({\n      taskEditing : taskEditing\n    });\n    this.onShowForm();\n  }\n\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword : keyword\n    });\n  }\n\n  onSort = (sortBy,sortValue) => {\n    this.setState({\n      sortBy : sortBy,\n      sortValue : sortValue\n    });\n  }\n\n  render() {\n    var sortBy = this.state.sortBy;\n    var sortValue = this.state.sortValue;\n    let { isDisplayForm } = this.props\n\n    return (\n      \n      <div className=\"container\">\n        <div className=\"text-center\">\n            <h1>Quản Lý Công Việc</h1>\n        </div><hr/>\n        \n        <div className=\"row\">\n          <div className={isDisplayForm ? 'col-lg-4 col-md-4 col-xl-4 col-sm-4' : ''}>\n            <TaskForm/> \n          </div> \n\n          <div className={ isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12 '}>\n              <button type=\"button\" \n                      className=\"btn btn-success\"\n                      onClick={ this.onToggleForm}\n                      >\n                <span className=\"fa fa-plus\"></span>Thêm Công Việc\n              </button>\n\n              <ConTrol  onSearch = {this.onSearch} onSort={this.onSort} sortBy={sortBy} sortValue={sortValue}/>\n\n              <div className=\"row mt-30\">\n                <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <TaskList />\n                </div>\n              </div>\n          </div> \n\n        </div>\n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isDisplayForm : state.isDisplayForm,\n    itemEditing: state.itemEditing\n  }\n}\nconst mapDispathToProps = (dispatch, props) => {\n  return {\n    onToggleForm : () => {\n      dispatch(actions.toggleForm())\n    },\n    onClearTask : (task) => {\n      dispatch(actions.editTask(task))\n    },\n    onOpenForm : () => {\n      dispatch(actions.openForm())\n    },\n  }\n}\nexport default connect(mapStateToProps,mapDispathToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from './../constants/ActionTypes';\n\n\nconst s4 = () => {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1); //tao ra chuoi random\n}\n\nconst generateID = () => {\n    return s4() + s4() + '-' + s4() + s4() + '-' + s4() + s4() + '-' + s4() + s4() + s4();\n}\n\nlet findIndex = (tasks,id) => {\n    var result = -1;\n    tasks.forEach((task, index) => {\n      if(task.id === id){\n        result = index;\n      }\n    });\n    return result;\n  }\n\nlet data = JSON.parse(localStorage.getItem('tasksLocal'));\n\nlet initialState = data ? data: []; //state\n\nlet myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.LIST_ALL:\n            return state;\n\n        case types.SAVE_TASK:\n            let newTask = {\n                id: action.task.id,\n                name: action.task.name,\n                staus : action.task.status === 'true' ? true : false\n            }\n            if(!newTask.id){\n                newTask.id = generateID();\n                state.push(newTask);\n                \n            }else{\n                let indexTask = findIndex(state,newTask.id);\n                state[indexTask] = newTask;\n            }\n            localStorage.setItem('tasksLocal', JSON.stringify(state));\n            return [...state];\n        \n        case types.UPDATE_STATUS:\n            let id = action.id;\n            let index = findIndex(state,id);\n            state[index] = {\n                ...state[index],\n                status : !state[index].status\n            };\n            localStorage.setItem('tasksLocal',JSON.stringify(state));\n            return [...state];\n\n        case types.DELETE_TASK:\n            let indexDelete = findIndex(state,action.id);\n            state.splice(indexDelete,1);\n            localStorage.setItem('tasksLocal',JSON.stringify(state));\n            return [...state];\n        default: return state;\n    }\n};\n\nexport default myReducer;","import * as types from './../constants/ActionTypes';\n\nlet initialState = false;\n\nlet myReducer = (state = initialState, action) => {\n    switch(action.type){\n        case types.TOGGLE_FORM:\n            return !state;\n        \n        case types.OPEN_FORM:\n            return true;\n\n        case types.CLOSE_FORM:\n            return false;\n\n        default : return state;\n    }\n}\n\nexport default myReducer;","import * as types from '../constants/ActionTypes';\n\nlet initialState = {\n    id : '',\n    name : '',\n    status : true\n};\n\nlet myReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case types.EDIT_ITEM:\n\n            return action.task;\n\n        default : return state;\n    }\n}\n\nexport default myReducer;","import * as types from '../constants/ActionTypes';\n\nlet initialState = {\n    name : '',\n    status : -1\n};\n\nlet myReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case types.FILTER_TABLE:\n            return {\n                name : action.filter.name,\n                status: parseInt(action.filter.status,10)\n            };\n\n        default : return state;\n    }\n}\n\nexport default myReducer;","import * as types from '../constants/ActionTypes';\n\nlet initialState = '';\n\nlet myReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case types.SEARCH:\n            return action.filter;\n            \n        default : return state;\n    }\n}\n\n\n\nexport default myReducer;","import { combineReducers } from 'redux';\nimport tasks from './tasks';\nimport isDisplayForm from './isDisplayForm';\nimport itemEditing from './itemEditing';\nimport filterTable from './filterTable';\nimport Search from './Search';\nconst myReducer = combineReducers({\n    tasks, // tasks : tasks\n    isDisplayForm,  // isDisplayForm : isDisplayForm\n    itemEditing,     //itemEditing : itemEditing\n    filterTable,\n    Search\n});\n\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport myReducer from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store  = createStore(myReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nReactDOM.render(\n            <Provider store = { store }>\n                <App />\n            </Provider>,\n            document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}